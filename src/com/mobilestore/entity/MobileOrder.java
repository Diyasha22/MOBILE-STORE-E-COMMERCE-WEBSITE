package com.mobilestore.entity;
// Generated 13-Jul-2021, 10:07:40 pm by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.NamedQueries;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * MobileOrder generated by hbm2java
 */
@Entity
@Table(name = "mobile_order", catalog = "mobilestoredb")
@NamedQueries({
	@NamedQuery(name= "MobileOrder.findAll", query = "SELECT mo FROM MobileOrder mo ORDER BY mo.orderDate DESC"),
	@NamedQuery(name= "MobileOrder.countAll", query= "SELECT COUNT(*) FROM MobileOrder"),
	@NamedQuery(name= "MobileOrder.findByCustomer", 
		query="SELECT mo FROM MobileOrder mo WHERE mo.customer.customerId =:customerId ORDER BY mo.orderDate DESC"),
	@NamedQuery(name= "MobileOrder.findByIdAndCustomer",
		query="SELECT mo FROM MobileOrder mo WHERE mo.orderId =:orderId AND mo.customer.customerId =:customerId")
})
public class MobileOrder implements java.io.Serializable {

	/**
	 * 
	 */
	//private static final long serialVersionUID = 1L;
	private Integer orderId;
	private Customer customer;
	private Date orderDate;
	private String shippingAddress;
	private String receipentName;
	private String receipentPhoneno;
	private String paymentMethod;
	private float total;
	private String status;
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public MobileOrder() {
	}

	public MobileOrder(Customer customer, Date orderDate, String shippingAddress, String receipentName,
			String receipentPhoneno, String paymentMethod, float total, String status) {
		this.customer = customer;
		this.orderDate = orderDate;
		this.shippingAddress = shippingAddress;
		this.receipentName = receipentName;
		this.receipentPhoneno = receipentPhoneno;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.status = status;
	}

	public MobileOrder(Customer customer, Date orderDate, String shippingAddress, String receipentName,
			String receipentPhoneno, String paymentMethod, float total, String status, Set<OrderDetail> orderDetails) {
		this.customer = customer;
		this.orderDate = orderDate;
		this.shippingAddress = shippingAddress;
		this.receipentName = receipentName;
		this.receipentPhoneno = receipentPhoneno;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.status = status;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "order_id", unique = true, nullable = false)
	public Integer getOrderId() {
		return this.orderId;
	}

	public void setOrderId(Integer orderId) {
		this.orderId = orderId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "order_date", nullable = false, length = 19)
	public Date getOrderDate() {
		return this.orderDate;
	}

	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	@Column(name = "shipping_address", nullable = false, length = 256)
	public String getShippingAddress() {
		return this.shippingAddress;
	}

	public void setShippingAddress(String shippingAddress) {
		this.shippingAddress = shippingAddress;
	}

	@Column(name = "receipent_name", nullable = false, length = 30)
	public String getReceipentName() {
		return this.receipentName;
	}

	public void setReceipentName(String receipentName) {
		this.receipentName = receipentName;
	}

	@Column(name = "receipent_phoneno", nullable = false, length = 15)
	public String getReceipentPhoneno() {
		return this.receipentPhoneno;
	}

	public void setReceipentPhoneno(String receipentPhoneno) {
		this.receipentPhoneno = receipentPhoneno;
	}

	@Column(name = "payment_method", nullable = false, length = 20)
	public String getPaymentMethod() {
		return this.paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	@Column(name = "total", nullable = false, precision = 12, scale = 0)
	public float getTotal() {
		int total=0;
		for(OrderDetail orderDetail: orderDetails)
			total+=orderDetail.getSubtotal();
		return total;
	}

	public void setTotal(float total) {
		this.total = total;
	}

	@Column(name = "status", nullable = false, length = 20)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "mobileOrder", cascade = CascadeType.ALL, orphanRemoval= true)
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}

	@Transient
	public int getProductCopies()
	{
	int total=0;
	for(OrderDetail orderDetail: orderDetails)
		total+=orderDetail.getQuantity();
	return total;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((orderId == null) ? 0 : orderId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MobileOrder other = (MobileOrder) obj;
		if (orderId == null) {
			if (other.orderId != null)
				return false;
		} else if (!orderId.equals(other.orderId))
			return false;
		return true;
	}
}